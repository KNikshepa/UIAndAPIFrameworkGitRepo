pipeline {
    agent any

    environment {
        // Define the SonarQube server URL and authentication token
        SONARQUBE_URL = 'http://localhost:9000'
        SONARQUBE_TOKEN = credentials('SonarQubeToken')
        GIT_TOKEN = credentials('Githubtoken')
        // Global environment variable for email
        EMAIL_RECIPIENTS = 'learn2621@gmail.com'  // Can also be referenced globally if set in Jenkins' Global Configuration
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                git credentialsId: 'Githubtoken', url: 'https://github.com/KNikshepa/UIAndAPIFrameworkGitRepo.git', branch: 'master'
            }
        }

        stage('Build') {
            steps {
                // Run Maven build
                bat 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // SonarQube name matches the configured name in Jenkins
                    withSonarQubeEnv('SonarQubeToken') {
                        bat """
                        mvn clean verify sonar:sonar \
                          -Dsonar.projectKey=UIAndAPIAutomationWithSonar \
                          -Dsonar.host.url=$SONARQUBE_URL \
                          -Dsonar.login=$SONARQUBE_TOKEN
                        """
                    }
                }
            }
        }

        stage('Test') {
            steps {
                // Run tests
                bat 'mvn test'
            }
        }

        stage('Deploy') {
            steps {
                // Deploy steps
                echo 'Deploying application...'
            }
        }
    }

    post {
        success {
            echo 'Build completed successfully!'

            // Send an email notification on success
            emailext(
                subject: "Build Successful: ${currentBuild.fullDisplayName} - Random Subject ${UUID.randomUUID().toString().take(8)}",
                body: """
                <p>The Jenkins build <b>${currentBuild.fullDisplayName}</b> has completed successfully.</p>
                <p>For more details, check the Jenkins console output at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>.</p>
                <p>Regards,<br>Automated Jenkins Build</p>
                """,
                to: "${EMAIL_RECIPIENTS}",  // Uses the globally defined environment variable
                attachLog: true, // Attach the Jenkins console log to the email
                attachmentsPattern: '**/target/*.html' // Attach build report (update this path if necessary)
            )
        }
        failure {
            echo 'Build failed!'

            // Send an email notification on failure
            emailext(
                subject: "Build Failed: ${currentBuild.fullDisplayName} - Random Subject ${UUID.randomUUID().toString().take(8)}",
                body: """
                <p>The Jenkins build <b>${currentBuild.fullDisplayName}</b> has failed.</p>
                <p>For more details, check the Jenkins console output at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>.</p>
                <p>Regards,<br>Automated Jenkins Build</p>
                """,
                to: "${EMAIL_RECIPIENTS}",  // Uses the globally defined environment variable
                attachLog: true
            )
        }
        always {
            echo 'Cleaning up...'
        }
    }
}
